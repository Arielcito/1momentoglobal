// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  username              String    @unique
  full_name             String?
  is_admin              Boolean   @default(false)
  created_at            DateTime  @default(now()) @db.Timestamptz
  accounts              Account[]
  sessions              Session[]
  courses               Course[]
  enrollments           Enrollment[]
  memberships           Membership[]
  payments              Payment[]
  notifications         Notification[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  course_id    Int      @id @default(autoincrement())
  title        String
  description  String?
  instructor   User     @relation(fields: [instructor_id], references: [id])
  instructor_id String
  created_at   DateTime @default(now()) @db.Timestamptz
  classes      Class[]
  enrollments  Enrollment[]
}

model Class {
  class_id     Int      @id @default(autoincrement())
  course       Course   @relation(fields: [course_id], references: [course_id])
  course_id    Int
  title        String
  description  String?
  scheduled_at DateTime? @db.Timestamptz
  is_live      Boolean  @default(false)
  recording_url String?
}

model Enrollment {
  enrollment_id Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  course        Course   @relation(fields: [course_id], references: [course_id])
  course_id     Int
  enrolled_at   DateTime @default(now()) @db.Timestamptz

  @@unique([user_id, course_id])
}

model Membership {
  membership_id Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  plan_name     String
  start_date    DateTime @db.Date
  end_date      DateTime? @db.Date
  is_active     Boolean  @default(true)
}

model Payment {
  payment_id     Int      @id @default(autoincrement())
  user           User     @relation(fields: [user_id], references: [id])
  user_id        String
  amount         Decimal  @db.Decimal(10, 2)
  payment_date   DateTime @default(now()) @db.Timestamptz
  payment_method String?
  status         String?
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
  message         String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamptz
}
